/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI.Eployee;

import DAO.ChiTietHoaDonDAO;
import DAO.HoaDonDAO;
import DAO.KhachHangDAO;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableModel;

import modal.ChiTietHoaDon;
import modal.KhachHang;

public class historyScreen extends javax.swing.JFrame {



    /**
     * Creates new form productFrame
     */
    public historyScreen() {
        initComponents();
        loadScreen();
    }
    ChiTietHoaDonDAO CT =new ChiTietHoaDonDAO();
    HoaDonDAO HD = new HoaDonDAO();
    public mainScreen ms;
    private void loadBills() {
        DefaultTableModel model = (DefaultTableModel) tableListBill.getModel();
        tableListBill.clearSelection();  
        model.setRowCount(0);
        Date dob = dtpk.getDate();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        List<String> l = HD.selectAll_procedure(sdf.format(dob));
        for(String x : l)
        { 
            
            String[] t = x.split("#");
            String[] tg = t[3].split(" ");
            String[] ngaygio = tg[0].split("-");
            t[3] = ngaygio[2]+"/"+ngaygio[1]+"/"+ngaygio[0]+"-"+tg[1].substring(0,8);
            Double price = Double.parseDouble(t[4]);
            String p = String.format("%,.0f VND",price);
            if(cbbPrice.getSelectedIndex()==0) model.addRow(new Object[]{t[0],t[2],t[1],t[3],p,t[5]});
            else if(cbbPrice.getSelectedIndex()==1)
            {
                if(price<100000) model.addRow(new Object[]{t[0],t[2],t[1],t[3],p,t[5]});
            }
            else if(cbbPrice.getSelectedIndex()==2)
            {
                if(price>=100000 &&price<500000) model.addRow(new Object[]{t[0],t[2],t[1],t[3],p,t[5]});
            }
            else if(cbbPrice.getSelectedIndex()==3)
            {
                if(price<1000000 &&price>=500000) model.addRow(new Object[]{t[0],t[2],t[1],t[3],p,t[5]});
            }
            else if(cbbPrice.getSelectedIndex()==4)
            {
                if(price<3000000 &&price>=1000000) model.addRow(new Object[]{t[0],t[2],t[1],t[3],p,t[5]});
            }
            else 
            {
                if(price>=3000000) model.addRow(new Object[]{t[0],t[2],t[1],t[3],p,t[5]});
            }
        }
    }
    
    private void loadBillDetails(int idB) {
        DefaultTableModel model = (DefaultTableModel) tableDetailBill.getModel();
        model.setRowCount(0);
        ChiTietHoaDonDAO ct =new ChiTietHoaDonDAO();
        List<ChiTietHoaDon> list = ct.findByMaHoaDon(idB);
        for(String x : CT.selectAll_procedure(idB))
        { 
            String[] t = x.split("#");
            model.addRow(new Object[]{t[0],t[1],t[3],t[2],t[4]});
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnMain = new javax.swing.JPanel();
        pnCRUD = new javax.swing.JPanel();
        lbTitleBill = new javax.swing.JLabel();
        pnListBill = new javax.swing.JPanel();
        lbTitleListBill = new javax.swing.JLabel();
        pnSearch = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cbbPrice = new javax.swing.JComboBox<>();
        dtpk = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableListBill = new javax.swing.JTable();
        pnDetailBill = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableDetailBill = new javax.swing.JTable();

        setResizable(false);
        setSize(new java.awt.Dimension(1180, 720));
        getContentPane().setLayout(null);

        pnMain.setBackground(new java.awt.Color(245, 247, 250));
        pnMain.setPreferredSize(new java.awt.Dimension(1180, 720));
        pnMain.setLayout(null);

        pnCRUD.setBackground(new java.awt.Color(153, 204, 255));
        pnCRUD.setForeground(new java.awt.Color(255, 255, 255));
        pnCRUD.setRequestFocusEnabled(false);
        pnCRUD.setLayout(null);

        lbTitleBill.setBackground(new java.awt.Color(102, 102, 102));
        lbTitleBill.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lbTitleBill.setForeground(new java.awt.Color(102, 102, 102));
        lbTitleBill.setText("HÓA ĐƠN MUA HÀNG");
        pnCRUD.add(lbTitleBill);
        lbTitleBill.setBounds(10, 10, 200, 30);

        pnMain.add(pnCRUD);
        pnCRUD.setBounds(0, 0, 1158, 50);

        pnListBill.setBackground(new java.awt.Color(255, 255, 255));
        pnListBill.setForeground(new java.awt.Color(51, 51, 51));
        pnListBill.setLayout(null);

        lbTitleListBill.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lbTitleListBill.setForeground(new java.awt.Color(40, 93, 179));
        lbTitleListBill.setText("DANH SÁCH HÓA ĐƠN");
        pnListBill.add(lbTitleListBill);
        lbTitleListBill.setBounds(10, 10, 210, 40);

        pnSearch.setBackground(new java.awt.Color(255, 255, 255));
        pnSearch.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setText("Tổng tiền");
        pnSearch.add(jLabel1);
        jLabel1.setBounds(70, 0, 100, 40);

        cbbPrice.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        cbbPrice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả", "Dưới 100.000đ", "100.000 - 500.000đ", "500.000 - 1.000.000đ", "1 triệu - 3 triệu", "Trên 3 triệu" }));
        pnSearch.add(cbbPrice);
        cbbPrice.setBounds(180, 0, 380, 40);

        pnListBill.add(pnSearch);
        pnSearch.setBounds(590, 10, 570, 40);

        dtpk.setBackground(new java.awt.Color(255, 255, 255));
        dtpk.setDateFormatString("dd/MM/yyyy");
        dtpk.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        pnListBill.add(dtpk);
        dtpk.setBounds(350, 10, 230, 40);

        tableListBill.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tableListBill.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableListBill.setRowHeight(35);
        jScrollPane1.setViewportView(tableListBill);

        pnListBill.add(jScrollPane1);
        jScrollPane1.setBounds(10, 70, 1150, 300);

        pnMain.add(pnListBill);
        pnListBill.setBounds(0, 300, 1160, 410);

        pnDetailBill.setBackground(new java.awt.Color(255, 255, 255));

        tableDetailBill.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tableDetailBill.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableDetailBill.setRowHeight(35);
        jScrollPane2.setViewportView(tableDetailBill);

        javax.swing.GroupLayout pnDetailBillLayout = new javax.swing.GroupLayout(pnDetailBill);
        pnDetailBill.setLayout(pnDetailBillLayout);
        pnDetailBillLayout.setHorizontalGroup(
            pnDetailBillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnDetailBillLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1148, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnDetailBillLayout.setVerticalGroup(
            pnDetailBillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnDetailBillLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnMain.add(pnDetailBill);
        pnDetailBill.setBounds(0, 50, 1160, 230);

        getContentPane().add(pnMain);
        pnMain.setBounds(0, 0, 1180, 720);
        pnMain.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(historyScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(historyScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(historyScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(historyScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new historyScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbbPrice;
    private com.toedter.calendar.JDateChooser dtpk;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbTitleBill;
    private javax.swing.JLabel lbTitleListBill;
    private javax.swing.JPanel pnCRUD;
    private javax.swing.JPanel pnDetailBill;
    private javax.swing.JPanel pnListBill;
    private javax.swing.JPanel pnMain;
    private javax.swing.JPanel pnSearch;
    private javax.swing.JTable tableDetailBill;
    private javax.swing.JTable tableListBill;
    // End of variables declaration//GEN-END:variables

    private void loadScreen() {
        setResizable(false);
        setSize(new java.awt.Dimension(1400, 830));
        setLocationRelativeTo(null);
        editTable(tableListBill);
        editTable(tableDetailBill);
        dtpk.setDate(new Date());
        loadBills();
        ItemListener reloadListener = e -> {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                loadBills();
            }
        };
        cbbPrice.addItemListener(reloadListener);
        dtpk.addPropertyChangeListener("date", new PropertyChangeListener() {
        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            loadBills();
        }
    });

    }
    private void styleHeader(JTable tb) {
        JTableHeader h = tb.getTableHeader();
        h.setFont(new Font("Arial", Font.BOLD, 14));
        h.setBackground(Color.LIGHT_GRAY);
        h.setForeground(Color.BLACK);
        ((DefaultTableCellRenderer) h.getDefaultRenderer())
                .setHorizontalAlignment(JLabel.CENTER);
    }
   private void editTable(JTable tb) {
        JTableHeader header = tb.getTableHeader();
        for (MouseListener ml : header.getMouseListeners()) {
            header.removeMouseListener(ml);
        }
        header.setFont(new Font("Arial", Font.BOLD, 14));
        header.setBackground(Color.LIGHT_GRAY);
        header.setForeground(Color.BLACK);
        ((DefaultTableCellRenderer) header.getDefaultRenderer())
            .setHorizontalAlignment(JLabel.CENTER);

        Object[][] data = {};
        Object[] columnNames;

        if (tb == tableListBill) {
            columnNames = new Object[]{"Mã hóa đơn", "Nhân viên", "Khách hàng", "Ngày lập", "Thành tiền", "Trạng thái"};
            tb.getSelectionModel().addListSelectionListener(e -> {
                if (!e.getValueIsAdjusting()) {
                    int sel = tb.getSelectedRow();
                    if (sel < 0) return;
                    int id = Integer.parseInt(tb.getValueAt(sel, 0).toString());
                    loadBillDetails(id);
                }
            });
        } else {
            columnNames = new Object[]{"Mã sản phẩm", "Sản phẩm", "Giá bán", "Số lượng", "Thành tiền"};
        }

        TableModel model = new DefaultTableModel(data, columnNames) {
            public boolean isCellEditable(int row, int column) { return false; }
        };

        tb.setModel(model); // 🔴 Đặt model trước khi dùng getColumn()

        // Renderer chung
        DefaultTableCellRenderer resetRenderer = new DefaultTableCellRenderer();
        resetRenderer.setHorizontalAlignment(JLabel.CENTER);
        resetRenderer.setFont(new Font("Arial", Font.BOLD, 12));
        resetRenderer.setForeground(Color.BLACK);

        if (tb == tableDetailBill) {
            tableDetailBill.getColumn("Mã sản phẩm").setCellRenderer(resetRenderer);
            tableDetailBill.getColumn("Giá bán").setCellRenderer(resetRenderer);
            tableDetailBill.getColumn("Số lượng").setCellRenderer(resetRenderer);
            tableDetailBill.getColumn("Thành tiền").setCellRenderer(resetRenderer);
        }

        if (tb == tableListBill) {
            resetRenderer = new DefaultTableCellRenderer();
            resetRenderer.setHorizontalAlignment(JLabel.CENTER);
            resetRenderer.setFont(new Font("Arial", Font.BOLD, 12));
            resetRenderer.setForeground(Color.RED);
            tableListBill.getColumn("Thành tiền").setCellRenderer(resetRenderer);

            resetRenderer = new DefaultTableCellRenderer();
            resetRenderer.setHorizontalAlignment(JLabel.CENTER);
            resetRenderer.setFont(new Font("Arial", Font.BOLD, 12));
            resetRenderer.setForeground(Color.BLUE);
            tableListBill.getColumn("Trạng thái").setCellRenderer(resetRenderer);
        }
    }
}