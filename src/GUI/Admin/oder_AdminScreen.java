/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI.Admin;

import DAO.ChiTietPhieuNhapDAO;
import DAO.NhaCungCapDAO;
import DAO.NhanVienDAO;
import DAO.PhieuNhapDAO;
import DAO.SanPhamDAO;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import modal.ChiTietPhieuNhap;
import modal.NhaCungCap;
import modal.PhieuNhap;
import modal.SanPham;

/**
 *
 * @author Minh
 */
public class oder_AdminScreen extends javax.swing.JFrame {

    /** Creates new form productFrame */
    public oder_AdminScreen(mainAdminScreen m) {
        initComponents();
        this.ms = m;
        loadScreen();
        setSize(new Dimension(1180,720));
        
        nmudQuantity.setMinimum(1);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnMain = new javax.swing.JPanel();
        pnCRUD = new javax.swing.JPanel();
        lbTitleList_client = new javax.swing.JLabel();
        btnExportFIle = new javax.swing.JButton();
        pnCategori = new javax.swing.JPanel();
        TablePane = new javax.swing.JTabbedPane();
        pnOder = new javax.swing.JPanel();
        ScrollPane = new javax.swing.JScrollPane();
        tableOderList = new javax.swing.JTable();
        cbbSort = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        cbbFindByStatus = new javax.swing.JComboBox<>();
        cbbFindByName = new javax.swing.JComboBox<>();
        cbbFindByPrice = new javax.swing.JComboBox<>();
        btnDecor = new javax.swing.JButton();
        pnCreateOderBill = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        lbOderEmployee = new javax.swing.JLabel();
        lbOderDateTime = new javax.swing.JLabel();
        lbSumPrice = new javax.swing.JLabel();
        cbbSupllier = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        nmudQuantity = new com.toedter.components.JSpinField();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableAddOderBill = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();
        btnReload = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        listAddProduct = new javax.swing.JList<>();
        pnDetailOderBill = new javax.swing.JPanel();
        lbSumPrice_Detail = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableDetailOderBill = new javax.swing.JTable();
        jLabel15 = new javax.swing.JLabel();
        cbbOderBill_Detail = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();

        setResizable(false);
        setSize(new java.awt.Dimension(1400, 830));
        getContentPane().setLayout(null);

        pnMain.setBackground(new java.awt.Color(245, 247, 250));
        pnMain.setPreferredSize(new java.awt.Dimension(1180, 720));
        pnMain.setLayout(null);

        pnCRUD.setBackground(new java.awt.Color(255, 255, 255));
        pnCRUD.setForeground(new java.awt.Color(51, 51, 51));
        pnCRUD.setLayout(null);

        lbTitleList_client.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lbTitleList_client.setForeground(new java.awt.Color(153, 0, 153));
        lbTitleList_client.setText("Nhập hàng");
        pnCRUD.add(lbTitleList_client);
        lbTitleList_client.setBounds(10, 8, 150, 22);

        btnExportFIle.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnExportFIle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/employee/file-import.png"))); // NOI18N
        btnExportFIle.setText("Xuất file");
        btnExportFIle.setBorder(null);
        pnCRUD.add(btnExportFIle);
        btnExportFIle.setBounds(1030, 4, 130, 30);

        pnMain.add(pnCRUD);
        pnCRUD.setBounds(0, 0, 1180, 40);

        pnCategori.setBackground(new java.awt.Color(255, 255, 255));
        pnCategori.setForeground(new java.awt.Color(51, 51, 51));
        pnCategori.setLayout(null);

        pnOder.setBackground(new java.awt.Color(255, 255, 255));

        tableOderList.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tableOderList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableOderList.setRowHeight(40);
        tableOderList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableOderList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableOderListMouseClicked(evt);
            }
        });
        ScrollPane.setViewportView(tableOderList);

        cbbSort.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        cbbSort.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mã nhà cung cấp", "Tên nhà cung cấp", "Ngày đặt", "Ngày nhận", "Giá tiền" }));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText("Sắp xếp theo");

        cbbFindByStatus.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        cbbFindByStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả đơn", "Đã nhận", "chờ nhận" }));

        cbbFindByName.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        cbbFindByName.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả nhà cung cấp", "TH True milk", "C2" }));

        cbbFindByPrice.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        cbbFindByPrice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả", "Dưới 1.000.000", "Trên 1.000.000" }));

        btnDecor.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnDecor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/employee/filters.png"))); // NOI18N
        btnDecor.setText("Tất cả");
        btnDecor.setBorder(null);
        btnDecor.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        javax.swing.GroupLayout pnOderLayout = new javax.swing.GroupLayout(pnOder);
        pnOder.setLayout(pnOderLayout);
        pnOderLayout.setHorizontalGroup(
            pnOderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnOderLayout.createSequentialGroup()
                .addGroup(pnOderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnOderLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnOderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDecor, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnOderLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(cbbFindByName, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnOderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnOderLayout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbbSort, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnOderLayout.createSequentialGroup()
                                .addComponent(cbbFindByPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbbFindByStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(24, 24, 24))
        );
        pnOderLayout.setVerticalGroup(
            pnOderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnOderLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(pnOderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDecor, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbbSort, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnOderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbbFindByName, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnOderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbbFindByStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbbFindByPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(ScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        TablePane.addTab("Danh sách phiếu đặt", pnOder);

        pnCreateOderBill.setBackground(new java.awt.Color(255, 255, 255));
        pnCreateOderBill.setLayout(null);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 153));
        jLabel4.setText("Thông tin cơ bản");
        pnCreateOderBill.add(jLabel4);
        jLabel4.setBounds(20, 20, 120, 20);

        lbOderEmployee.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        lbOderEmployee.setText("Người đặt: Quản Tri viên Tăng Hữu Minh");
        pnCreateOderBill.add(lbOderEmployee);
        lbOderEmployee.setBounds(40, 80, 340, 20);

        lbOderDateTime.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        lbOderDateTime.setText("Thời gian đặt: 7:03-28/4/2025");
        pnCreateOderBill.add(lbOderDateTime);
        lbOderDateTime.setBounds(40, 50, 290, 16);

        lbSumPrice.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        lbSumPrice.setForeground(new java.awt.Color(153, 0, 0));
        lbSumPrice.setText("Tổng tiền:");
        pnCreateOderBill.add(lbSumPrice);
        lbSumPrice.setBounds(510, 50, 510, 20);

        cbbSupllier.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        cbbSupllier.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbbSupllier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbSupllierActionPerformed(evt);
            }
        });
        pnCreateOderBill.add(cbbSupllier);
        cbbSupllier.setBounds(140, 150, 190, 30);

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel8.setText("Số lượng đặt");
        pnCreateOderBill.add(jLabel8);
        jLabel8.setBounds(40, 190, 100, 30);

        nmudQuantity.setValue(1);
        pnCreateOderBill.add(nmudQuantity);
        nmudQuantity.setBounds(140, 190, 190, 30);

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel9.setText("Nhà cung cấp");
        pnCreateOderBill.add(jLabel9);
        jLabel9.setBounds(40, 150, 100, 30);

        tableAddOderBill.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tableAddOderBill.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableAddOderBill.setRowHeight(40);
        tableAddOderBill.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableAddOderBillMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableAddOderBill);

        pnCreateOderBill.add(jScrollPane1);
        jScrollPane1.setBounds(380, 80, 740, 490);

        btnSave.setBackground(new java.awt.Color(51, 153, 0));
        btnSave.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/employee/folder.png"))); // NOI18N
        btnSave.setText("Lưu dữ liệu");
        btnSave.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnSave.setBorderPainted(false);
        btnSave.setFocusPainted(false);
        btnSave.setFocusable(false);
        btnSave.setPreferredSize(new java.awt.Dimension(230, 30));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        pnCreateOderBill.add(btnSave);
        btnSave.setBounds(960, 10, 160, 30);

        btnReload.setBackground(new java.awt.Color(255, 204, 0));
        btnReload.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnReload.setForeground(new java.awt.Color(255, 255, 255));
        btnReload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/employee/reload.png"))); // NOI18N
        btnReload.setText("Làm mới");
        btnReload.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnReload.setBorderPainted(false);
        btnReload.setFocusPainted(false);
        btnReload.setFocusable(false);
        btnReload.setPreferredSize(new java.awt.Dimension(230, 30));
        btnReload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReloadActionPerformed(evt);
            }
        });
        pnCreateOderBill.add(btnReload);
        btnReload.setBounds(800, 10, 150, 30);

        jLabel10.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 153));
        jLabel10.setText("Thông tin đặt hàng");
        pnCreateOderBill.add(jLabel10);
        jLabel10.setBounds(20, 120, 140, 20);

        jLabel11.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 153));
        jLabel11.setText("Thông tin chi tiết");
        pnCreateOderBill.add(jLabel11);
        jLabel11.setBounds(380, 50, 140, 20);

        listAddProduct.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        listAddProduct.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listAddProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listAddProductMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(listAddProduct);

        pnCreateOderBill.add(jScrollPane6);
        jScrollPane6.setBounds(20, 240, 330, 330);

        TablePane.addTab("Tạo Phiếu Đặt Hàng", pnCreateOderBill);

        pnDetailOderBill.setBackground(new java.awt.Color(255, 255, 255));
        pnDetailOderBill.setLayout(null);

        lbSumPrice_Detail.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        lbSumPrice_Detail.setForeground(new java.awt.Color(153, 0, 0));
        lbSumPrice_Detail.setText("Tổng tiền:");
        pnDetailOderBill.add(lbSumPrice_Detail);
        lbSumPrice_Detail.setBounds(160, 10, 140, 30);

        tableDetailOderBill.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tableDetailOderBill.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableDetailOderBill.setRowHeight(40);
        jScrollPane3.setViewportView(tableDetailOderBill);

        pnDetailOderBill.add(jScrollPane3);
        jScrollPane3.setBounds(20, 60, 1100, 510);

        jLabel15.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 0, 153));
        jLabel15.setText("Phiếu nhập:");
        pnDetailOderBill.add(jLabel15);
        jLabel15.setBounds(810, 10, 90, 40);

        cbbOderBill_Detail.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        pnDetailOderBill.add(cbbOderBill_Detail);
        cbbOderBill_Detail.setBounds(910, 10, 210, 40);

        jLabel17.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(0, 0, 153));
        jLabel17.setText("Thông tin chi tiết");
        pnDetailOderBill.add(jLabel17);
        jLabel17.setBounds(20, 10, 140, 30);

        TablePane.addTab("Tạo Phiếu Đặt Hàng", pnDetailOderBill);

        pnCategori.add(TablePane);
        TablePane.setBounds(10, 0, 1160, 630);

        pnMain.add(pnCategori);
        pnCategori.setBounds(0, 50, 1180, 630);

        getContentPane().add(pnMain);
        pnMain.setBounds(0, 0, 1180, 720);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listAddProductMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listAddProductMouseClicked
        // TODO add your handling code here:
        int id = Integer.parseInt(listAddProduct.getSelectedValue().split(":")[0].trim());

        SanPham s = SP.findById(id);
        if(tableAddOderBill.getRowCount()>0)
        {
            int idOne = Integer.parseInt(tableAddOderBill.getValueAt(0,0).toString());
            SanPham sone = SP.findById(idOne);
            if(s.getMaNhaCungCap()!=sone.getMaNhaCungCap())
            {
                JOptionPane.showMessageDialog(null, "Mỗi phiếu nhập chỉ gồm 1 nhà cung cấp","",JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
        for(int i=0;i<tableAddOderBill.getRowCount();i++)
        {
            int idp = Integer.parseInt(tableAddOderBill.getValueAt(i, 0).toString());
            if(idp==s.getMaSanPham())
            {
                int qty = Integer.parseInt(tableAddOderBill.getValueAt(i, 3).toString());
                tableAddOderBill.setValueAt(qty+nmudQuantity.getValue(),i,3);
                tableAddOderBill.setValueAt((qty+nmudQuantity.getValue())*s.getGia(),i,4);
                updateSumAdd();
                return;
            }
        }
        modelAdd.addRow(new Object[]{
            s.getMaSanPham(),
            s.getTenSanPham(),
            s.getGia(),
            nmudQuantity.getValue(),
            s.getGia()*nmudQuantity.getValue(),
            "Xóa"
        });
        updateSumAdd();
    }//GEN-LAST:event_listAddProductMouseClicked

    private void btnReloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReloadActionPerformed
        // TODO add your handling code here:
        if(tableAddOderBill.getRowCount()!=0)
        {
            while(tableAddOderBill.getRowCount()!=1)
            modelAdd.removeRow(1);
            modelAdd.removeRow(0);
            updateSumAdd();
        }
    }//GEN-LAST:event_btnReloadActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        if(tableAddOderBill.getRowCount()!=0)
        {
            PhieuNhap p = new PhieuNhap();
            p.setMaNhaCungCap(NCC.getIDbyName(cbbSupllier.getSelectedItem().toString()));
            p.setNguoiDat(ms.staffId);
            PN.insert(p);
            int id = PN.getNewID();
            for(int i=0;i<tableAddOderBill.getRowCount();i++)
            {
                ChiTietPhieuNhap ct = new ChiTietPhieuNhap();
                ct.setMaPhieuNhap(id);
                int masp = Integer.parseInt(tableAddOderBill.getValueAt(i,0).toString());
                ct.setMaSanPham(masp);
                Object obj = tableAddOderBill.getValueAt(i, 2);
                int value = ((Double) obj).intValue();
                //                String temp = String.valueOf(gia).split(".")[0];
                ct.setGiaNhap(value);
                ct.setSoLuongDat(Integer.parseInt(tableAddOderBill.getValueAt(i,3).toString()));
                CT.insert(ct);
            }
            JOptionPane.showMessageDialog(null, "Đặt hàng thành công!","",JOptionPane.WARNING_MESSAGE);
            loadComboboxOrderBill();
            loadOderBill();
            while(tableAddOderBill.getRowCount()!=1)
            modelAdd.removeRow(1);
            modelAdd.removeRow(0);
            updateSumAdd();
        }

    }//GEN-LAST:event_btnSaveActionPerformed

    private void tableAddOderBillMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableAddOderBillMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_tableAddOderBillMouseClicked

    private void cbbSupllierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbSupllierActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cbbSupllierActionPerformed

    private void tableOderListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableOderListMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tableOderListMouseClicked
    private void updateSumAdd()
    {
        double s=0;
       for(int i=0;i<tableAddOderBill.getRowCount();i++)
        {
            double price = Double.parseDouble(tableAddOderBill.getValueAt(i, 4).toString());
            s+= price;
        }
       lbSumPrice.setText("Tổng tiền:   "+s);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(oder_AdminScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(oder_AdminScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(oder_AdminScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(oder_AdminScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new oder_AdminScreen(new mainAdminScreen()).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ScrollPane;
    private javax.swing.JTabbedPane TablePane;
    private javax.swing.JButton btnDecor;
    private javax.swing.JButton btnExportFIle;
    private javax.swing.JButton btnReload;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> cbbFindByName;
    private javax.swing.JComboBox<String> cbbFindByPrice;
    private javax.swing.JComboBox<String> cbbFindByStatus;
    private javax.swing.JComboBox<String> cbbOderBill_Detail;
    private javax.swing.JComboBox<String> cbbSort;
    private javax.swing.JComboBox<String> cbbSupllier;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lbOderDateTime;
    private javax.swing.JLabel lbOderEmployee;
    private javax.swing.JLabel lbSumPrice;
    private javax.swing.JLabel lbSumPrice_Detail;
    private javax.swing.JLabel lbTitleList_client;
    private javax.swing.JList<String> listAddProduct;
    private com.toedter.components.JSpinField nmudQuantity;
    private javax.swing.JPanel pnCRUD;
    private javax.swing.JPanel pnCategori;
    private javax.swing.JPanel pnCreateOderBill;
    private javax.swing.JPanel pnDetailOderBill;
    private javax.swing.JPanel pnMain;
    private javax.swing.JPanel pnOder;
    private javax.swing.JTable tableAddOderBill;
    private javax.swing.JTable tableDetailOderBill;
    private javax.swing.JTable tableOderList;
    // End of variables declaration//GEN-END:variables

    mainAdminScreen ms;
    List<String> list = new ArrayList();
    ChiTietPhieuNhapDAO CT =new ChiTietPhieuNhapDAO();
    PhieuNhapDAO PN = new PhieuNhapDAO();
    NhaCungCapDAO NCC = new NhaCungCapDAO();
    SanPhamDAO SP = new SanPhamDAO();
    NhanVienDAO NV = new NhanVienDAO();
    DefaultTableModel modelDetail = new DefaultTableModel();
    DefaultTableModel modelAdd = new DefaultTableModel();
    DefaultTableModel modelList = new DefaultTableModel();
    private void loadScreen()
    {
        setResizable(false);
       
        editTable_detail();
        editTable_List();
        editTable_add();
        tableDetailOderBill.setModel(modelDetail);
        
        editButton();
        editCombobox();
        editTabTitle(TablePane,pnOder,"Danh sách phiếu nhập",0);
        editTabTitle(TablePane,pnCreateOderBill,"Tạo phiếu nhập",1);
        editTabTitle(TablePane,pnDetailOderBill,"Chi tiết phiếu nhập",2);
        loadOderBill();
        loadComboboxOrderBill();
        lbOderDateTime.setText("Thời gian đặt: "+String.valueOf(LocalDate.now()));
        lbOderEmployee.setText("Người đặt: "+NV.getnameByID(ms.staffId));
    }
    private void detailOderBill(int id)
    {
        modelDetail.setRowCount(0);
        List<ChiTietPhieuNhap> list= CT.findByMaPhieuNhap(id);
        System.out.println(list.size());
        int sum=0;
        for(ChiTietPhieuNhap x : list)
        {
            int t = x.getSoLuongDat() *x.getGiaNhap();
            sum+=t;
            modelDetail.addRow(new Object[]{x.getMaSanPham(),
                SP.findById(x.getMaSanPham()).getTenSanPham(),x.getGiaNhap(),x.getSoLuongDat(),t});
        }
        lbSumPrice_Detail.setText("Tổng tiền: "+sum);
    }
    private void loadOderBill()
    {
        modelList.setRowCount(0);
        String ncc = " where ncc.maNhaCungCap = pn.maNhaCungCap and ncc.tenNcc like N'%%' ";
        if(cbbFindByName.getSelectedIndex()!=0)  ncc = " where  ncc.maNhaCungCap = pn.maNhaCungCap and ncc.tenNcc like N'%"+cbbFindByName.getSelectedItem().toString()+"%' ";
        String gt = "";
        if(cbbFindByPrice.getSelectedIndex()==1) gt = " and dbo.TinhTongTienPhieuNhap(pn.maPhieuNhap) <= 1000000 ";
        else if(cbbFindByPrice.getSelectedIndex()==2) gt = " and dbo.TinhTongTienPhieuNhap(pn.maPhieuNhap) > 1000000 ";
        String tt ="";
        if(cbbFindByStatus.getSelectedIndex()==1) gt = " and pn.trangthai = N'Đã nhận' ";
        else if(cbbFindByStatus.getSelectedIndex()==2) gt = " and pn.trangthai = N'Chờ nhận' ";
        String order = " order by pn.maPhieuNhap asc";
        if(cbbSort.getSelectedIndex()==1)   order = " order by ncc.tenNcc asc";
        else if(cbbSort.getSelectedIndex()==2)   order = " order by pn.ngayDat asc";
        else if(cbbSort.getSelectedIndex()==3)   order = " order by pn.ngayNhan asc";
        else if(cbbSort.getSelectedIndex()==4)   order = " order by dbo.TinhTongTienPhieuNhap(pn.maPhieuNhap) asc";
        String sql = "SELECT pn.* FROM phieu_nhap pn, nha_cung_cap ncc "+ncc+gt+tt+order;
        //JOptionPane.showMessageDialog(null, sql);
        List<PhieuNhap> list = PN.selectAll_condition(ncc+gt+tt+order);
        for(PhieuNhap x : list)
        {
            String Nguoi = x.getNgayNhan() == null ? "NULL" :  NV.getnameByID(x.getNguoiNhan());
            String Ngay = x.getNgayNhan() == null ? "NULL" :  x.getNgayNhan();
            String TrangThai =  x.getNgayNhan() == null ? "Chờ nhận" : "Đã nhận"; 
            modelList.addRow(new Object[]{
                x.getMaPhieuNhap(),
                NCC.findById(x.getMaNhaCungCap()).getTenNcc(),
                NV.getnameByID(x.getNguoiDat()),
                Nguoi,
                x.getNgayDat(),
                Ngay,
                TrangThai,
                "Xóa"
                
            });
        }
        DefaultTableCellRenderer resetRenderer = new DefaultTableCellRenderer();
        resetRenderer.setHorizontalAlignment(JLabel.CENTER);
        resetRenderer.setFont(new Font("Arial", Font.BOLD, 12));
        resetRenderer.setForeground(Color.BLUE);
        
        tableOderList.getColumn("Nhận hàng").setCellRenderer(resetRenderer);

        resetRenderer = new DefaultTableCellRenderer();
        resetRenderer.setHorizontalAlignment(JLabel.CENTER);
        resetRenderer.setFont(new Font("Arial", Font.BOLD, 12));
        resetRenderer.setForeground(Color.RED);
        tableOderList.getColumn("Hủy").setCellRenderer(resetRenderer);
        tableOderList.setModel(modelList);
    }
    private void editCombobox()
    {
        cbbFindByStatus.setBackground(Color.WHITE);
        cbbFindByPrice.setBackground(Color.WHITE);
        cbbFindByName.setBackground(Color.WHITE);
        cbbSort.setBackground(Color.WHITE);
        cbbSupllier.setBackground(Color.WHITE);
    }
    private void editButton()
    {
        btnExportFIle.setBackground(Color.WHITE);
        btnDecor.setContentAreaFilled(false);
    }
    private void editTabTitle(JTabbedPane tabbedPane, JPanel tabPanel, String title,int index) {
        JLabel label = new JLabel(title);
        label.setFont(new java.awt.Font("Arial", 0, 16));
        label.setPreferredSize(new Dimension(220,30));
        tabbedPane.setTabComponentAt(index, label);
    }
    private void editTable_detail() {
       Object[] columnNames = {"Mã SP", "Tên SP", "Giá", "Số lượng","Thành tiền"};
        modelDetail = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tableDetailOderBill.setModel(modelDetail);
        JTableHeader header = tableDetailOderBill.getTableHeader();
        header.setFont(new Font("Arial", Font.BOLD, 14));
        header.setBackground(Color.LIGHT_GRAY);
        header.setForeground(Color.BLACK);
        ((DefaultTableCellRenderer) header.getDefaultRenderer())
            .setHorizontalAlignment(JLabel.CENTER);
        DefaultTableCellRenderer resetRenderer = new DefaultTableCellRenderer();
        resetRenderer.setHorizontalAlignment(JLabel.CENTER);
        resetRenderer.setFont(new Font("Arial", Font.BOLD, 12));
        resetRenderer.setForeground(Color.BLACK);
        tableDetailOderBill.getColumn("Mã SP").setCellRenderer(resetRenderer);
        tableDetailOderBill.getColumn("Số lượng").setCellRenderer(resetRenderer);
        tableDetailOderBill.getColumn("Giá").setCellRenderer(resetRenderer);
        tableDetailOderBill.getColumn("Thành tiền").setCellRenderer(resetRenderer);
    }
    private void editTable_add() {
       Object[] columnNames = {"Mã SP", "Tên SP", "Giá", "Số lượng","Thành tiền","Xóa"};
        modelAdd = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tableAddOderBill.setModel(modelAdd);
        JTableHeader header = tableAddOderBill.getTableHeader();
        header.setFont(new Font("Arial", Font.BOLD, 14));
        header.setBackground(Color.LIGHT_GRAY);
        header.setForeground(Color.BLACK);
        ((DefaultTableCellRenderer) header.getDefaultRenderer())
            .setHorizontalAlignment(JLabel.CENTER);
       tableAddOderBill.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int row = tableAddOderBill.getSelectedRow();
                    int col = tableAddOderBill.getSelectedColumn();
                    if (row < 0 || col < 0) return;
                    if (col > 4) {
                        int confirm = JOptionPane.showConfirmDialog(
                            null,
                            "Bạn có chắc chắn muốn xóa dòng này?",
                            "Xác nhận xóa",
                            JOptionPane.YES_NO_OPTION
                        );
                        if (confirm == JOptionPane.YES_OPTION) {
                            modelAdd.removeRow(row);
                            updateSumAdd();
                        }
                    }
                }
            }
        });

        DefaultTableCellRenderer resetRenderer = new DefaultTableCellRenderer();
        resetRenderer.setHorizontalAlignment(JLabel.CENTER);
        resetRenderer.setFont(new Font("Arial", Font.BOLD, 12));
        resetRenderer.setForeground(Color.BLACK);
        tableAddOderBill.getColumn("Mã SP").setCellRenderer(resetRenderer);
        tableAddOderBill.getColumn("Số lượng").setCellRenderer(resetRenderer);
        tableAddOderBill.getColumn("Giá").setCellRenderer(resetRenderer);
        tableAddOderBill.getColumn("Thành tiền").setCellRenderer(resetRenderer);
    }
    private void editTable_List() {
       Object[] columnNames = {"Mã PN", "NCC","Người đặt","Người nhận", "Ngày đặt", "Ngày nhận","Nhận hàng","Hủy"};
        modelList = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tableOderList.setModel(modelList);
        JTableHeader header = tableOderList.getTableHeader();
        header.setFont(new Font("Arial", Font.BOLD, 14));
        header.setBackground(Color.LIGHT_GRAY);
        header.setForeground(Color.BLACK);
        ((DefaultTableCellRenderer) header.getDefaultRenderer())
            .setHorizontalAlignment(JLabel.CENTER);
        tableOderList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int selectedRow = tableOderList.getSelectedRow(); 
                int selectedColumn = tableOderList.getSelectedColumn();
                if (selectedRow >= 0 & selectedColumn ==6) {
                    if(!tableOderList.getValueAt(selectedRow, 6).equals("Đã nhận"))
                    {
                        int choose =JOptionPane.showConfirmDialog( null,"Bạn có muốn xác nhận phiếu nhập ?" , "Xác nhận",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
                            if (choose == JOptionPane.YES_OPTION) {
                                List<ChiTietPhieuNhap> list = CT.findByMaPhieuNhap(Integer.parseInt(tableOderList.getValueAt(selectedRow,0).toString()));
                                for(ChiTietPhieuNhap p : list)
                                {
                                    SP.update_quantity(p.getMaSanPham(),p.getSoLuongDat());
                                }
                                PN.Confirm(Integer.parseInt(tableOderList.getValueAt(selectedRow,0).toString()),ms.staffId);
                                JOptionPane.showMessageDialog(null, "Đơn hàng xác nhận thành công!","",JOptionPane.INFORMATION_MESSAGE);
                                loadOderBill();
                                  loadComboboxOrderBill();
                            } 
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, "Đơn hàng này đã được xác nhận!","",JOptionPane.WARNING_MESSAGE);
                    }
                }
                else if (selectedRow >= 0 & selectedColumn ==7) {
                    if(!tableOderList.getValueAt(selectedRow, 6).equals("Đã nhận"))
                    {
                        int choose =JOptionPane.showConfirmDialog( null,"Bạn có muốn hủy phiếu nhập ?" , "Xác nhận",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
                            if (choose == JOptionPane.YES_OPTION) {
                                CT.delete_all(Integer.parseInt(tableOderList.getValueAt(selectedRow,0).toString()));
                                PN.delete(Integer.parseInt(tableOderList.getValueAt(selectedRow,0).toString()));
                                JOptionPane.showMessageDialog(null, "Đơn hàng hủy thành công!","",JOptionPane.INFORMATION_MESSAGE);
                                    loadOderBill();
                                  loadComboboxOrderBill();
                            } 
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, "Đơn hàng này đã được xác nhận!","",JOptionPane.WARNING_MESSAGE);
                    }
                }               
            }
        });
    }
 
    private void loadProductToList()
    {
        int id = NCC.getIDbyName(cbbSupllier.getSelectedItem().toString());
        List<SanPham> l = SP.findBySupplier(id);
        DefaultListModel<String> model = new DefaultListModel<>();
        listAddProduct.setModel(model);
        
        for(SanPham x : l)
            model.addElement(x.getMaSanPham()+"     :"+x.getTenSanPham());
    }
    private void loadComboboxOrderBill()
    {
        ItemListener loadDetailOder = e -> {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                detailOderBill(Integer.parseInt(cbbOderBill_Detail.getSelectedItem().toString()));
            }
        };
        ItemListener loadListOder = e -> {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                loadOderBill();
            }
        };
        ItemListener loadSupplierProduct = e -> {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                loadProductToList();
            }
        };
        cbbFindByName.addItemListener(loadListOder);
        cbbFindByPrice.addItemListener(loadListOder);
        cbbFindByStatus.addItemListener(loadListOder);
        
        cbbSupllier.addItemListener(loadSupplierProduct);
        
        cbbSort.addItemListener(loadListOder);
        cbbOderBill_Detail.addItemListener(loadDetailOder);
        cbbOderBill_Detail.removeAllItems();
        cbbFindByName.removeAllItems();
        cbbSupllier.removeAllItems();
     
        cbbFindByName.addItem("Tất cả nhà cung cấp");
        List<PhieuNhap> l = PN.selectAll();
        for(PhieuNhap x : l)
        {
            cbbOderBill_Detail.addItem(String.valueOf(x.getMaPhieuNhap()).trim());
        }
        List<NhaCungCap> ln = NCC.getAll();
        for(NhaCungCap x : ln)
        {
            cbbSupllier.addItem(String.valueOf(x.getTenNcc()).trim());
            cbbFindByName.addItem(String.valueOf(x.getTenNcc()).trim());
        }
    }
   
}
