/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI.Admin;

import DAO.HoaDonDAO;
import DAO.KhachHangDAO;
import DAO.NhaCungCapDAO;
import DAO.NhanVienDAO;
import DAO.SanPhamDAO;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.util.Arrays;
import java.util.List;
import javax.swing.JOptionPane;


import modal.HoaDon;
import modal.SanPham;

/**
 *
 * @author Minh
 */
public class chart_AdminScreen extends javax.swing.JFrame {

    /** Creates new form productFrame */
    public chart_AdminScreen(mainAdminScreen m) {
        initComponents();
        loadScreen();
        setSize(new Dimension(1180,720));
        this.ms = m;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnMain = new javax.swing.JPanel();
        pnProduct = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lbSupllier = new javax.swing.JLabel();
        pnProduct1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        lbProduct = new javax.swing.JLabel();
        pnProduct2 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        lbEmployee = new javax.swing.JLabel();
        pnProduct3 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        lbCustomer = new javax.swing.JLabel();
        pnProduct4 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        lbPrice = new javax.swing.JLabel();
        pnLine = new javax.swing.JPanel();
        pnPie = new javax.swing.JPanel();
        pnBar = new javax.swing.JPanel();
        lbProduct2 = new javax.swing.JLabel();
        lbProduct3 = new javax.swing.JLabel();
        lbProduct5 = new javax.swing.JLabel();
        cbbYear = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        cbbMonth = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();

        setResizable(false);
        setSize(new java.awt.Dimension(1400, 830));
        getContentPane().setLayout(null);

        pnMain.setBackground(new java.awt.Color(245, 247, 250));
        pnMain.setPreferredSize(new java.awt.Dimension(1180, 720));
        pnMain.setLayout(null);

        pnProduct.setBackground(new java.awt.Color(255, 255, 255));
        pnProduct.setLayout(null);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/employee/supplier.png"))); // NOI18N
        jButton1.setBorderPainted(false);
        pnProduct.add(jButton1);
        jButton1.setBounds(10, 30, 46, 47);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("NHÀ CUNG ỨNG");
        pnProduct.add(jLabel1);
        jLabel1.setBounds(70, 70, 130, 16);

        lbSupllier.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        lbSupllier.setText("100+");
        pnProduct.add(lbSupllier);
        lbSupllier.setBounds(70, 30, 60, 24);

        pnMain.add(pnProduct);
        pnProduct.setBounds(960, 10, 220, 120);

        pnProduct1.setBackground(new java.awt.Color(255, 255, 255));
        pnProduct1.setLayout(null);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/employee/products.png"))); // NOI18N
        jButton2.setBorderPainted(false);
        pnProduct1.add(jButton2);
        jButton2.setBounds(10, 30, 46, 47);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("SẢN PHẨM");
        pnProduct1.add(jLabel2);
        jLabel2.setBounds(70, 70, 110, 16);

        lbProduct.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        lbProduct.setText("100+");
        pnProduct1.add(lbProduct);
        lbProduct.setBounds(70, 30, 60, 24);

        pnMain.add(pnProduct1);
        pnProduct1.setBounds(10, 10, 220, 120);

        pnProduct2.setBackground(new java.awt.Color(255, 255, 255));
        pnProduct2.setLayout(null);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/employee/staff.png"))); // NOI18N
        jButton3.setBorderPainted(false);
        pnProduct2.add(jButton3);
        jButton3.setBounds(10, 30, 46, 47);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("NHÂN VIÊN");
        pnProduct2.add(jLabel3);
        jLabel3.setBounds(70, 70, 110, 16);

        lbEmployee.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        lbEmployee.setText("50+");
        pnProduct2.add(lbEmployee);
        lbEmployee.setBounds(70, 30, 60, 24);

        pnMain.add(pnProduct2);
        pnProduct2.setBounds(250, 10, 220, 120);

        pnProduct3.setBackground(new java.awt.Color(255, 255, 255));
        pnProduct3.setLayout(null);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/employee/customer-satisfaction.png"))); // NOI18N
        jButton4.setBorderPainted(false);
        pnProduct3.add(jButton4);
        jButton4.setBounds(10, 30, 46, 47);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setText("KHÁCH HÀNG");
        pnProduct3.add(jLabel4);
        jLabel4.setBounds(70, 70, 120, 16);

        lbCustomer.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        lbCustomer.setText("100+");
        pnProduct3.add(lbCustomer);
        lbCustomer.setBounds(70, 30, 60, 24);

        pnMain.add(pnProduct3);
        pnProduct3.setBounds(490, 10, 220, 120);

        pnProduct4.setBackground(new java.awt.Color(255, 255, 255));
        pnProduct4.setLayout(null);

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/employee/money-bag.png"))); // NOI18N
        jButton5.setBorderPainted(false);
        pnProduct4.add(jButton5);
        jButton5.setBounds(10, 30, 46, 47);

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 102, 102));
        jLabel5.setText("DOANH THU");
        pnProduct4.add(jLabel5);
        jLabel5.setBounds(70, 70, 110, 16);

        lbPrice.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        lbPrice.setText("12.350.000");
        pnProduct4.add(lbPrice);
        lbPrice.setBounds(70, 30, 120, 24);

        pnMain.add(pnProduct4);
        pnProduct4.setBounds(730, 10, 220, 120);

        pnLine.setBackground(new java.awt.Color(255, 255, 255));
        pnMain.add(pnLine);
        pnLine.setBounds(10, 180, 770, 470);

        pnPie.setBackground(new java.awt.Color(255, 255, 255));
        pnMain.add(pnPie);
        pnPie.setBounds(790, 450, 370, 200);

        pnBar.setBackground(new java.awt.Color(255, 255, 255));
        pnMain.add(pnBar);
        pnBar.setBounds(790, 180, 380, 210);

        lbProduct2.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        lbProduct2.setText("Biểu đồ phân bổ khách hàng");
        pnMain.add(lbProduct2);
        lbProduct2.setBounds(790, 410, 270, 24);

        lbProduct3.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        lbProduct3.setText("Thống kê doanh thu theo tháng");
        pnMain.add(lbProduct3);
        lbProduct3.setBounds(10, 150, 280, 24);

        lbProduct5.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        lbProduct5.setText("Thống kê Top 5 sản phẩm bán chạy");
        pnMain.add(lbProduct5);
        lbProduct5.setBounds(790, 150, 380, 24);

        cbbYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2024", "2025" }));
        cbbYear.setSelectedIndex(1);
        pnMain.add(cbbYear);
        cbbYear.setBounds(480, 150, 70, 22);

        jLabel6.setText("Năm");
        pnMain.add(jLabel6);
        jLabel6.setBounds(440, 150, 30, 20);

        cbbMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        cbbMonth.setSelectedIndex(5);
        pnMain.add(cbbMonth);
        cbbMonth.setBounds(370, 150, 60, 22);

        jLabel7.setText("Tháng");
        pnMain.add(jLabel7);
        jLabel7.setBounds(330, 146, 37, 30);

        getContentPane().add(pnMain);
        pnMain.setBounds(0, 0, 1180, 670);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(chart_AdminScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(chart_AdminScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(chart_AdminScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(chart_AdminScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new chart_AdminScreen(new mainAdminScreen()).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbbMonth;
    private javax.swing.JComboBox<String> cbbYear;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel lbCustomer;
    private javax.swing.JLabel lbEmployee;
    private javax.swing.JLabel lbPrice;
    private javax.swing.JLabel lbProduct;
    private javax.swing.JLabel lbProduct2;
    private javax.swing.JLabel lbProduct3;
    private javax.swing.JLabel lbProduct5;
    private javax.swing.JLabel lbSupllier;
    private javax.swing.JPanel pnBar;
    private javax.swing.JPanel pnLine;
    private javax.swing.JPanel pnMain;
    private javax.swing.JPanel pnPie;
    private javax.swing.JPanel pnProduct;
    private javax.swing.JPanel pnProduct1;
    private javax.swing.JPanel pnProduct2;
    private javax.swing.JPanel pnProduct3;
    private javax.swing.JPanel pnProduct4;
    // End of variables declaration//GEN-END:variables

    mainAdminScreen ms;
    private void loadData()
    {
        NhaCungCapDAO ncc =new NhaCungCapDAO();
        NhanVienDAO nv = new NhanVienDAO();
        KhachHangDAO kh = new KhachHangDAO();
        SanPhamDAO sp = new SanPhamDAO();
        HoaDonDAO hd = new HoaDonDAO();
        lbCustomer.setText(String.valueOf(kh.getAll().size()));
        lbPrice.setText(String.valueOf(hd.getAllSumPrice()));
        lbEmployee.setText(String.valueOf(nv.getAll("").size()));
        lbSupllier.setText(String.valueOf(ncc.getAll().size()));
        lbProduct.setText(String.valueOf(sp.getAll().size()));
    }
    private void loadScreen()
    {
        setResizable(false);
        editButton();
        loadData();
        pnPie.setLayout(new java.awt.BorderLayout());
        pnPie.add(new PieChartPanel());

        pnBar.setLayout(new java.awt.BorderLayout());
        pnBar.add(new BarChartPanel());

        pnLine.setLayout(new java.awt.BorderLayout());
        pnLine.add(new LineChartPanel());
        ItemListener reloadListener = e -> {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                pnLine.repaint();
            }
        };
        cbbMonth.addItemListener(reloadListener);
        cbbYear.addItemListener(reloadListener);
    }

    private void editButton()
    {
        jButton1.setContentAreaFilled(false);
        jButton2.setContentAreaFilled(false);
        jButton3.setContentAreaFilled(false);
        jButton4.setContentAreaFilled(false);
        jButton5.setContentAreaFilled(false);
    }
    private int[] data = {40, 30, 20, 10}; // dữ liệu mẫu
    private Color[] colors = {Color.RED, Color.BLUE, Color.GREEN, Color.ORANGE};

    private void drawPieChart(Graphics g, Rectangle area) {
        // Chia panel làm 2 phần: bên trái vẽ biểu đồ, bên phải để legend
        int chartWidth = (int)(area.width * 0.6); // chiếm 60% bên trái để vẽ
        int chartHeight = area.height;

        Rectangle pieArea = new Rectangle(area.x, area.y, chartWidth, chartHeight);

        // Vẽ biểu đồ tròn tại pieArea
        drawActualPieChart(g, pieArea); // gọi hàm vẽ pie riêng

        // Vẽ chú thích bên phải
        drawLegend(g, area.x + chartWidth + 20, area.y + 40); // căn phải
    }
    private void drawActualPieChart(Graphics g, Rectangle area) {
        int noCustomer = HD.getCountBill_NoneCustomer();
        int isCustomer = HD.selectAll().size() - noCustomer;

        int[] datapie = {isCustomer, noCustomer};
        String[] labels = {"Khách hàng thành viên", "Khách hàng vãng lai"};
        Color[] colors = {Color.RED, Color.BLUE};
        int total = Arrays.stream(datapie).sum();

        int startAngle = 0;
        int centerX = area.x + area.width / 2;
        int centerY = area.y + area.height / 2;
        int radius = Math.min(area.width, area.height) / 2;

        for (int i = 0; i < datapie.length; i++) {
            int arcAngle = (int) Math.round(360.0 * datapie[i] / (double) total);
            g.setColor(colors[i]);
            g.fillArc(area.x, area.y, area.width, area.height, startAngle, arcAngle);

            // Vẽ % ở giữa cung
            double theta = Math.toRadians(startAngle + arcAngle / 2.0);
            int labelX = centerX + (int)(radius * 0.5 * Math.cos(theta));
            int labelY = centerY + (int)(radius * 0.5 * Math.sin(theta));
            int percent = (int) Math.round((double) datapie[i] / total * 100);

            g.setColor(Color.WHITE);
            g.drawString(percent + "%", labelX - 15, labelY+35);

            startAngle += arcAngle;
        }
    }
    private void drawLegend(Graphics g, int x, int yStart) {
        String[] labels = {"Khách hàng thành viên", "Khách hàng vãng lai"};
        Color[] colors = {Color.RED, Color.BLUE};

        for (int i = 0; i < labels.length; i++) {
            g.setColor(colors[i]);
            g.fillRect(x, yStart + i * 40, 20, 20);

            g.setColor(Color.BLACK);
            g.drawRect(x, yStart + i * 40, 20, 20);

            g.drawString(labels[i], x + 30, yStart + i * 40 + 15);
        }
    }


    HoaDonDAO HD = new HoaDonDAO();
    SanPhamDAO SP = new SanPhamDAO();
    private String hoverLabel = null;
    private int mouseX = -1;
    private void drawBarChart(Graphics g, Rectangle area) {
        
        List<String> databar = SP.sales();

        int n = 10;

        String[] labels = new String[n];
        int[] datap = new int[n];

        for (int i = 0; i < n; i++) {
            
            String[] parts = databar.get(i).split("#");
            labels[i] = parts[0];
            datap[i] = Integer.parseInt(parts[1]);
        }

        int barWidth = area.width / n;
        int max = Arrays.stream(datap).max().getAsInt();
        hoverLabel = null; // reset mỗi lần vẽ
        double maxRatio = 0.8;

        int maxHeight = (int)(area.height * maxRatio);

        for (int i = 0; i < n; i++) {
            int x = area.x + i * barWidth;
            int barHeight = (int) ((double) datap[i] / max * maxHeight);
            int y = area.y + area.height - barHeight - 10; // trừ thêm 10 để tránh đụng sát khung

            g.setColor(colors[i % colors.length]);
            g.fillRect(x, y, barWidth - 10, barHeight);

            // Hover
            if (mouseX >= x && mouseX <= x + barWidth - 10) {
                hoverLabel = labels[i];
            }

            g.setColor(Color.WHITE);
            g.drawString(String.valueOf(datap[i]), x + (barWidth - 10) / 2 - 10, area.y-10 + area.height - 2);
        }

        // Hiển thị label khi hover
        if (hoverLabel != null) {
            SanPham s= SP.findById(Integer.parseInt(hoverLabel));
            FontMetrics fm = g.getFontMetrics();
            int textWidth = fm.stringWidth("Sản phẩm: "+s.getTenSanPham());
            int boxPadding = 10;

            int boxWidth = textWidth + boxPadding * 2;

            g.setColor(new Color(255, 255, 200));
            g.fillRoundRect(180, area.y + 10, boxWidth, 20, 10, 10);
            g.setColor(Color.BLACK);
            g.drawRoundRect(180, area.y + 10, boxWidth, 20, 10, 10);
           
            g.drawString("Sản phẩm: "+s.getTenSanPham() , 185, area.y + 25);
        }
    }
    private void drawLineChart(Graphics g, Rectangle area) {
    int thang = cbbMonth.getSelectedIndex() + 1;
    int nam = cbbYear.getSelectedIndex() + 2024;

    List<String> datal = HD.sales(thang, nam);

    // Không có dữ liệu
    if (datal == null || datal.size() == 0) {
        g.setColor(Color.RED);
        g.drawString("Không có dữ liệu trong tháng " + thang, area.x + 20, area.y + area.height / 2);
        return;
    }

    // Chỉ có 1 dòng dữ liệu
    if (datal.size() == 1) {
        String[] parts = datal.get(0).split("#");
        String day = parts[0];
        int sale = Integer.parseInt(parts[1]);

        g.setColor(Color.RED);
        int x = area.x + area.width / 2;
        int maxHeight = (int) (area.height * 0.6);
        int y = area.y + area.height - maxHeight; // vì sale/sale = 1

        // Vẽ điểm
        g.fillOval(x - 3, y - 3, 6, 6);

        // Hiển thị nhãn
        g.setColor(Color.BLUE);
        g.drawString(day.split("-")[2]+"/"+day.split("-")[1], x - 10,y+20);
        g.drawString(String.valueOf(sale), x - 10, y - 10);
        return;
    }

    // Trường hợp có nhiều dòng dữ liệu
    int n = datal.size();
    String[] days = new String[n];
    int[] sales = new int[n];

    for (int i = 0; i < n; i++) {
        String[] parts = datal.get(i).split("#");
        days[i] = parts[0].split("-")[2]+"/"+parts[0].split("-")[1];
        sales[i] = Integer.parseInt(parts[1]);
    }

    int pointGap = area.width / (n - 1); // an toàn vì n >= 2
    int max = Arrays.stream(sales).max().orElse(1);
    int maxHeight = (int) (area.height * 0.6);

    int[] xPoints = new int[n];
    int[] yPoints = new int[n];

    for (int i = 0; i < n; i++) {
        xPoints[i] = area.x + i * pointGap;
        yPoints[i] = area.y + area.height - (int) ((double) sales[i] / max * maxHeight);
    }

    // Vẽ đường nối
    g.setColor(Color.BLACK);
    for (int i = 0; i < n - 1; i++) {
        g.drawLine(xPoints[i], yPoints[i], xPoints[i + 1], yPoints[i + 1]);
    }

    // Vẽ điểm đỏ
    g.setColor(Color.RED);
    for (int i = 0; i < n; i++) {
        g.fillOval(xPoints[i] - 3, yPoints[i] - 3, 6, 6);
        g.drawString(String.valueOf(sales[i]), xPoints[i], yPoints[i] - 9);
    }
    
    // Hiển thị nhãn ngày (tự động giãn cách)
    g.setColor(Color.BLUE);
    int interval = Math.max(1, n / 10); // tối đa 10 nhãn
    for (int i = 0; i < n; i++) {
        if (i % interval == 0 || i == n - 1) {
            g.drawString(days[i], xPoints[i]-15, area.y-10 + area.height );
        }
    }
}



    // Lớp vẽ biểu đồ tròn
    class PieChartPanel extends javax.swing.JPanel {
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            drawPieChart(g, new Rectangle(10, 10, getWidth() - 20, getHeight() - 20));
        }
    }

    // Lớp vẽ biểu đồ cột
    class BarChartPanel extends javax.swing.JPanel {
         public BarChartPanel() 
         {
            addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                mouseX = e.getX();
                repaint();
            }
            });
        }
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            drawBarChart(g, new Rectangle(10, 10, getWidth() - 20, getHeight() - 20));
        }
  
    }

    // Lớp vẽ biểu đồ đường
    class LineChartPanel extends javax.swing.JPanel {
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            drawLineChart(g, new Rectangle(10, 10, getWidth() - 20, getHeight() - 20));
        }
    }

}
